# NAME

Dist::Zilla::Plugin::MetaProvides::Package - Extract namespaces/version from traditional packages for provides

# VERSION

version 1.14000003

# SYNOPSIS

In your `dist.ini`:

    [MetaProvides::Package]
    inherit_version = 0    ; optional
    inherit_missing = 0    ; optional
    meta_noindex    = 1    ; optional

# ROLES

## [Dist::Zilla::Role::MetaProvider::Provider](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider)

{
    "namespace":"Dist::Zilla::Plugin::MetaProvides::Package",
    "interface":"class",
    "inherits":"Moose::Object",
    "does":"Dist::Zilla::Role::MetaProvider::Provider"
}



# OPTIONS INHERITED FROM [Dist::Zilla::Role::MetaProvider::Provider](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider)

## [`inherit_version`](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider#inherit\_version)

How do you want existing versions ( Versions hard-coded into files before running this plug-in )to be processed?

- DEFAULT: inherit\_version = 1

    Ignore anything you find in a file, and just probe `DZIL->version()` for a value. This is a sane default and most will want this.

- inherit\_version = 0

    Use this option if you actually want to use hard-coded values in your files and use the versions parsed out of them.

## [`inherit_missing`](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider#inherit\_missing)

In the event you are using the aforementioned `["inherit\_version"](#inherit\_version) = 0`, this determines how to behave when encountering a
module with no version defined.

- DEFAULT: inherit\_missing = 1

    When a module has no version, probe `DZIL->version()` for an answer. This is what you want if you want to have some
    files with fixed versions, and others to just automatically be maintained by Dist::Zilla.

- inherit\_missing = 0

    When a module has no version, emit a versionless record in the final metadata.

## [`meta_noindex`](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider#meta\_noindex)

This is a utility for people who are also using [`MetaNoIndex`](http://search.cpan.org/perldoc?Dist::Zilla::Plugin::MetaNoIndex),
so that its settings can be used to eliminate items from the 'provides' list.

- meta\_noindex = 0

    By default, do nothing unusual.

- DEFAULT: meta\_noindex = 1

    When a module meets the criteria provided to [`MetaNoIndex`](http://search.cpan.org/perldoc?Dist::Zilla::Plugin::MetaNoIndex),
    eliminate it from the metadata shipped to [Dist::Zilla](http://search.cpan.org/perldoc?Dist::Zilla)

# ROLE SATISFYING METHODS

## provides

A conformant function to the [Dist::Zilla::Role::MetaProvider::Provider](http://search.cpan.org/perldoc?Dist::Zilla::Role::MetaProvider::Provider) Role.

### signature: $plugin->provides()

### returns: Array of [Dist::Zilla::MetaProvides::ProvideRecord](http://search.cpan.org/perldoc?Dist::Zilla::MetaProvides::ProvideRecord)

# PRIVATE METHODS

## \_packages\_for

### signature: $plugin->\_packages\_for( $filename, $file\_content )

### returns: Array of [Dist::Zilla::MetaProvides::ProvideRecord](http://search.cpan.org/perldoc?Dist::Zilla::MetaProvides::ProvideRecord)

# SEE ALSO

- [Dist::Zilla::Plugin::MetaProvides](http://search.cpan.org/perldoc?Dist::Zilla::Plugin::MetaProvides)

# AUTHOR

Kent Fredric <kentnl@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Kent Fredric.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
